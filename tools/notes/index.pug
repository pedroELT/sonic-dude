html
  head
    link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.1/css/bulma.min.css")
    link(rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css")
    link(rel="stylesheet" href="https://unpkg.com/easymde/dist/easymde.min.css")
    script(src="https://unpkg.com/easymde/dist/easymde.min.js")
    meta(charset="utf-8")
    meta(name="viewport" content="width=device-width, initial-scale=1")
    style.
      body {
        padding: 2vh;
      }
      .hide {
        display: none !important;
      }
  body
    div.block
      form.block(method='POST' url='/notes')
        .field
          .control
            input(type='hidden' name='action' value='add-topic')
            input.input(type='text' name='topic' placeholder='Topic')
        .field
          .control
            button.button.is-success.is-small(type='submit')
              i.fas.fa-plus(aria-hidden='true')
              
    div(class="container content")
      each notes, topic in topics
        nav.panel
          .panel-heading
            .media
              .media-content
                span #{topic}
              .media-right
                button.button.is-danger.is-small(ondblclick='deleteTopic(\''+topic+'\')')
                  i.fas.fa-times(aria-hidden='true')

          .panel-block
            form.block.control.has-icons-left(method='POST' url='/notes')
              .field
                .control
                  input(type='hidden' name='action' value='add-note')
                  input(type='hidden' name='topic' value=topic)
                  input.input(type='text' name='note' placeholder='Note Name')
              .field
                .control
                  button.button.is-success.is-small(type='submit')
                    i.fas.fa-plus(aria-hidden='true') 
          each content, note in notes

            div.panel-block 
              div.tile.is-ancestor 
                div.tile.is-parent
                  div.tile.is-child.is-1
                    button.button.is-info.is-small(onclick='edit(\''+topic+'\',\''+note+'\')')
                      i.fas.fa-book(aria-hidden='true')
                  div.tile.is-child.is-9
                    span.subtitle #{note}
                  div.tile.is-child.is-1
                    form(method='POST' url='/notes')
                      input(type='hidden' name='action' value='convert')
                      input(type='hidden' name='topic' value=topic)
                      input(type='hidden' name='note' value=note)
                      button.button.is-warning.is-small(type='submit')
                        i.fas.fa-download(aria-hidden='true') 
                  div.tile.is-child.is-1
                    button.button.is-danger.is-small(ondblclick='deleteNote(\''+topic+'\',\''+note+'\')')
                      i.fas.fa-times(aria-hidden='true')
          
          .panel-block
            textarea.hide(id=topic)
                
              
    script.
      let easyMDE;
      let openedTopic;
      const edit = async (topic, note) => {
        if (easyMDE && openedTopic) {
          openedTopic = document.getElementById(topic);
          openedTopic.classList.add('.hide');
          easyMDE.toTextArea();
          easyMDE = null;
        }
        openedTopic = document.getElementById(topic);
        openedTopic.classList.remove('.hide');
        easyMDE = new EasyMDE({element: openedTopic});
        try {
          const notecontent = await action('get', topic, note);
          easyMDE.value(notecontent);
          easyMDE.codemirror.on("change", async () => {
            if (easyMDE.value()) {
              await action('set', topic, note, easyMDE.value());
            }
          });
        } catch(err) {
          console.error(err);
        }
        
      };

      const deleteNote = async (topic, note) => {
        await action('delete-note', topic, note);
        document.location.reload();
      };

      const deleteTopic = async (topic) => {
        await action('delete-topic', topic);
        document.location.reload();
      };

      const action = (action, topic, note, content) => {
        return new Promise((resolve, reject) => {
          const xhr = new XMLHttpRequest();
          xhr.open("POST", '/notes', true);
          xhr.setRequestHeader("Content-Type", "application/json");
          xhr.setRequestHeader("Accept", "application/json");
          xhr.onreadystatechange = function() { 
            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
              try {
                resolve(xhr.response);
              } catch (err) {
                reject(err);
              }
            }
          };
          xhr.send(JSON.stringify({action, topic, note, content}));
        });
        
      }